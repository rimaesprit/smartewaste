{% extends 'FrontBase.html.twig' %}

{% block title %}Nouvelle Réclamation{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <style>
        #map-container {
            height: 400px;
            margin-bottom: 15px;
            border-radius: 5px;
            border: 1px solid #ced4da;
        }
        .map-search-box {
            margin-bottom: 10px;
        }
        .leaflet-control-attribution {
            font-size: 10px;
        }
        /* Ajout pour le curseur de la carte */
        #map-container.leaflet-container {
            cursor: pointer !important;
        }
        /* Ajout pour améliorer la visibilité du marqueur */
        .leaflet-marker-icon {
            filter: drop-shadow(0 0 2px rgba(0,0,0,0.5));
        }
    </style>
{% endblock %}

{% block body %}
<section class="page-section">
    <div class="container">
        <div class="section-header">
            <h2>Nouvelle Réclamation</h2>
            <p>Soumettez votre réclamation à l'administration</p>
        </div>
        
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body p-4">
                        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
                        
                        <div class="mb-4">
                            {{ form_label(form.typeRec, 'Type de réclamation', {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.typeRec, {'attr': {'class': 'form-select'}}) }}
                            <div class="invalid-feedback">
                                {{ form_errors(form.typeRec) }}
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            {{ form_label(form.reclamation, 'Détails de votre réclamation', {'label_attr': {'class': 'form-label'}}) }}
                            {{ form_widget(form.reclamation, {'attr': {'class': 'form-control', 'rows': '5', 'placeholder': 'Veuillez décrire votre problème en détail...'}}) }}
                            <div class="form-text">Soyez précis dans votre description pour faciliter le traitement de votre demande.</div>
                            <div class="invalid-feedback">
                                {{ form_errors(form.reclamation) }}
                            </div>
                        </div>
                        
                        <div class="mb-4">
                            {{ form_label(form.address, 'Adresse concernée', {'label_attr': {'class': 'form-label'}}) }}
                            <div class="map-search-box">
                                {{ form_widget(form.address, {'attr': {'class': 'form-control map-address', 'placeholder': 'Recherchez une adresse ou cliquez sur la carte'}}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.address) }}
                                </div>
                            </div>
                            <div id="map-container"></div>
                            {{ form_widget(form.latitude, {'attr': {'class': 'map-latitude'}}) }}
                            {{ form_widget(form.longitude, {'attr': {'class': 'map-longitude'}}) }}
                        </div>
                        
                        {% if form.photoFile is defined %}
                        <div class="mb-4">
                            {{ form_label(form.photoFile, 'Photo (optionnelle)', {'label_attr': {'class': 'form-label'}}) }}
                            <div class="input-group">
                                {{ form_widget(form.photoFile, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <div class="form-text">Formats acceptés: JPG, PNG, GIF. Taille max: 5MB</div>
                            <div class="invalid-feedback">
                                {{ form_errors(form.photoFile) }}
                            </div>
                        </div>
                        {% endif %}
                        
                        <div class="d-flex justify-content-between mt-4">
                            <a href="{{ path('app_front_reclamation_index') }}" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left me-2"></i>Retour
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check-circle me-2"></i>Soumettre ma réclamation
                            </button>
                        </div>
                        
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script>
    // Validation du formulaire côté client
    (function() {
        'use strict';
        
        // Fetch all forms we want to apply validation to
        var forms = document.querySelectorAll('.needs-validation');
        
        // Loop over them and prevent submission
        Array.prototype.slice.call(forms).forEach(function(form) {
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });
    })();
    
    // Configuration et initialisation de la carte
    document.addEventListener('DOMContentLoaded', function() {
        console.log("Initialisation de la carte...");
        
        // Position par défaut (centre de la Tunisie)
        var defaultLat = 36.8065;
        var defaultLng = 10.1815;
        var defaultZoom = 13;
        
        // Références aux champs de formulaire
        var addressInput = document.querySelector('input.map-address');
        var latitudeInput = document.querySelector('input.map-latitude');
        var longitudeInput = document.querySelector('input.map-longitude');
        
        // Vérifier que les éléments existent
        if (!addressInput || !latitudeInput || !longitudeInput) {
            console.error("Impossible de trouver les champs du formulaire nécessaires pour la carte");
            return;
        }
        
        console.log("Champs de formulaire trouvés:", 
            "address:", addressInput ? "OK" : "Non trouvé", 
            "latitude:", latitudeInput ? "OK" : "Non trouvé", 
            "longitude:", longitudeInput ? "OK" : "Non trouvé"
        );
        
        // Initialiser la carte
        var mapContainer = document.getElementById('map-container');
        if (!mapContainer) {
            console.error("Impossible de trouver le conteneur de la carte");
            return;
        }
        
        var map = L.map('map-container').setView([defaultLat, defaultLng], defaultZoom);
        
        // Ajouter la couche de tuiles OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Initialiser le marqueur
        var marker = null;
        
        // Fonction pour mettre à jour le marqueur
        function updateMarker(lat, lng, address) {
            console.log("Mise à jour du marqueur:", lat, lng, address);
            
            // Supprimer le marqueur existant
            if (marker) {
                map.removeLayer(marker);
            }
            
            // Ajouter un nouveau marqueur
            marker = L.marker([lat, lng]).addTo(map);
            marker.bindPopup(address || 'Position sélectionnée').openPopup();
            
            // Mettre à jour les champs cachés
            latitudeInput.value = lat;
            longitudeInput.value = lng;
            
            // Mettre à jour l'adresse si elle n'est pas définie
            if (address && !addressInput.value) {
                addressInput.value = address;
            }
            
            // Centrer la carte
            map.setView([lat, lng], map.getZoom());
            
            console.log("Valeurs mises à jour:", 
                "latitude:", latitudeInput.value,
                "longitude:", longitudeInput.value,
                "adresse:", addressInput.value
            );
        }
        
        // Gérer les clics sur la carte
        map.on('click', function(e) {
            var lat = e.latlng.lat;
            var lng = e.latlng.lng;
            
            console.log("Clic sur la carte:", lat, lng);
            
            // Mettre à jour immédiatement les champs de latitude et longitude
            latitudeInput.value = lat;
            longitudeInput.value = lng;
            
            // Utiliser l'API de géocodage inversé pour obtenir l'adresse
            var nominatimUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=fr`;
            
            // Ajouter un paramètre timestamp pour éviter le cache
            nominatimUrl += "&_=" + new Date().getTime();
            
            fetch(nominatimUrl, {
                headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'SmartWaste Application (contact@smartwaste.com)'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur de réponse du serveur: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log("Réponse de géocodage inversé:", data);
                var address = data.display_name;
                addressInput.value = address;
                updateMarker(lat, lng, address);
            })
            .catch(error => {
                console.error("Erreur de géocodage inversé:", error);
                // En cas d'erreur, utiliser simplement les coordonnées comme adresse
                addressInput.value = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                updateMarker(lat, lng);
            });
        });
        
        // Gérer la recherche d'adresse
        addressInput.addEventListener('change', function() {
            var query = addressInput.value;
            if (query && query.length > 3) {
                console.log("Recherche d'adresse:", query);
                
                var nominatimUrl = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&accept-language=fr`;
                
                // Ajouter un paramètre timestamp pour éviter le cache
                nominatimUrl += "&_=" + new Date().getTime();
                
                fetch(nominatimUrl, {
                    headers: {
                        'Accept': 'application/json',
                        'User-Agent': 'SmartWaste Application (contact@smartwaste.com)'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur de réponse du serveur: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Réponse de géocodage:", data);
                    if (data && data.length > 0) {
                        var lat = parseFloat(data[0].lat);
                        var lng = parseFloat(data[0].lon);
                        updateMarker(lat, lng, data[0].display_name);
                    } else {
                        console.warn("Aucun résultat trouvé pour:", query);
                    }
                })
                .catch(error => {
                    console.error("Erreur de géocodage:", error);
                });
            }
        });
        
        // Si les coordonnées sont déjà définies (édition), afficher le marqueur
        if (latitudeInput.value && longitudeInput.value) {
            var lat = parseFloat(latitudeInput.value);
            var lng = parseFloat(longitudeInput.value);
            console.log("Coordonnées existantes trouvées:", lat, lng);
            updateMarker(lat, lng, addressInput.value);
        }
    });
</script>
{% endblock %} 